searchNodes=[{"ref":"ExploringMars.html","title":"ExploringMars","type":"module","doc":"Start reading here. The program defined in this project can be ran in three ways: It can be used as a CLI application It can be used interactively, reading the problem statement from files and running the program specification Or it can be used interactively, passing the problem statement to the relevant functions as an already-parsed data structure. There is a module encapsulating each of these ways of running the program: ExploringMars.CLI defines the CLI application. Running the command mix escript.build at the top-level of this project will generate a binary file named exploring_mars which can be ran on any computer which has an Erlang runtime available. For more information on this CLI app, check the documentation for the ExploringMars.CLI module. ExploringMars.MissionRunner defines the functions which read the input and write the output to files (or to standard input/output). Calling ExploringMars.MissionRunner.get_bounds_and_run/2 passing in input and output files (or :stdio in any of the arguments) will attempt to read in bounds followed by a series of mission specifications (each mission specification consists of an initial position and a series of instructions), outputting the results to the specified output device. Note that this function reads from the input device until it finds EOF, so press Ctrl+D to end the input if reading from :stdio. ExploringMars.Mission defines the functions which take the already-parsed data for a mission and return the result of the mission as an Elixir data structure. Check the module doc for more details. This is probably the module you should use if you want to use this from iex."},{"ref":"ExploringMars.CLI.html","title":"ExploringMars.CLI","type":"module","doc":"Top-level module for the CLI application, encapsulating the interpretation of command-line arguments. Delegates actual execution to the MissionRunner module. Contains mainly functions dealing with finding and opening files. Should contain only impure functions. Most functions in this module should be private, as it should only expose the full command-line interface as main. This module should change if the command-line arguments to the CLI program change."},{"ref":"ExploringMars.CLI.html#main/1","title":"ExploringMars.CLI.main/1","type":"function","doc":"The main command-line program entry point. Takes the following command-line arguments: --file, -f: Should be a string specifying a file path. The mission commands will be read from this file. If not specified, the program will read from standard input. --output, -o: Should be a string specifying a file path. The mission results for each specified probe will be output to this file. If not specified, the program will write to standard output. If called in interactive mode, the arguments should be passed as a list of strings."},{"ref":"ExploringMars.Mission.html","title":"ExploringMars.Mission","type":"module","doc":"This module defines a mission. A mission encapsulates a single run of a probe, being defined by a single set of problem parameters (bounds, initial position, and instructions). Calling Mission.run with these parameters will produce the status in which the probe ended (mission outcome -- see below), together with the final position of the probe. This module should change if the way a mission is represented changes."},{"ref":"ExploringMars.Mission.html#result_to_string/1","title":"ExploringMars.Mission.result_to_string/1","type":"function","doc":"Converts the result of a mission into a string suitable for user-facing output."},{"ref":"ExploringMars.Mission.html#run/3","title":"ExploringMars.Mission.run/3","type":"function","doc":"Run a mission by setting its parameters. Returns mission outcome and final position. Each outcome specifies how its final position should be interpreted. Check the outcome documentation above for further details."},{"ref":"ExploringMars.Mission.html#t:outcome/0","title":"ExploringMars.Mission.outcome/0","type":"type","doc":"A mission outcome represents the final status of a mission. :ok -&gt; All commands were executed successfully :out_of_bounds -&gt; The probe fell off the plateau. The position reported will be the position the probe was attempting to move to when it fell off. :illegal_instruction -&gt; The probe tried to execute something that was not a valid instruction. The position reported will be the position where the probe was when it executed the invalid instruction."},{"ref":"ExploringMars.Mission.html#t:result/0","title":"ExploringMars.Mission.result/0","type":"type","doc":"A mission&#39;s result is its outcome together with its final position. See the outcome type&#39;s documentation above for further details."},{"ref":"ExploringMars.Mission.Coordinate.html","title":"ExploringMars.Mission.Coordinate","type":"module","doc":"This module defines functions that create and operate on coordinates in the probe&#39;s space of movement. This module and the Direction module should change if the coordinate representation used in the problem changes - for instance, if we choose to use {y, x} coordinates instead of {x, y} or if we choose to model a probe moving in 3D space. This means this module is coupled to the Direction model, as it depends directly on the representation of the Direction.t type. This is acceptable for now, as the Direction.t type is quite simple, but it might need change. Check the note in the documentation of the Direction module for further details."},{"ref":"ExploringMars.Mission.Coordinate.html#from_strings/2","title":"ExploringMars.Mission.Coordinate.from_strings/2","type":"function","doc":"Takes a pair of strings, x_string and y_string and tries to parse them as a coordinate. Examples iex&gt; Coordinate.from_strings(&quot;100&quot;, &quot;200&quot;) {:ok, {100, 200}} iex&gt; Coordinate.from_strings(&quot;100x&quot;, &quot;200y&quot;) {:no_parse, &quot;{100x, 200y}&quot;}"},{"ref":"ExploringMars.Mission.Coordinate.html#move/2","title":"ExploringMars.Mission.Coordinate.move/2","type":"function","doc":"Moves a coordinate along a direction. Examples iex&gt; Coordinate.move({-1, 0}, :E) {0, 0} iex&gt; Coordinate.move({0, 0}, &quot;Not a direction&quot;) ** (ArgumentError) argument is not a direction"},{"ref":"ExploringMars.Mission.Coordinate.html#pretty_print/1","title":"ExploringMars.Mission.Coordinate.pretty_print/1","type":"function","doc":"Converts a coordinate into a representation suitable for user-facing output."},{"ref":"ExploringMars.Mission.Coordinate.html#t:t/0","title":"ExploringMars.Mission.Coordinate.t/0","type":"type","doc":"A coordinate is defined as a pair of integers specifying a position on the cartesian plane. The order of coordinates is {x, y}."},{"ref":"ExploringMars.Mission.Direction.html","title":"ExploringMars.Mission.Direction","type":"module","doc":"This module defines functions that create and operate on directions in the probe&#39;s coordinate space. This module should change if the coordinate representation used in the problem changes in degrees of freedom - for instance, if we decide the probe could move in 3D space rather than 2D, or if the probe could move in 8 directions instead of 4. In that case, we would need to also change the Coordinate module in order to handle the new directions. This coupling between the Direction and Coordinate modules is, for now, acceptable, because the Directions to be handled are few. If we were to choose a case where we would have more possible Directions, it might be worthwhile to create an Axis module which would specify the axes of movement available to the probe, and make both Direction and Coordinate modules depend on the Axis module - the Direction module would produce which axis or axes correspond to each direction, and the Coordinate module would know how to update the coordinate according to motion on each axis. That way, we would mitigate the amount of code that should be changed in the case of a change in coordinate system degrees of freedom."},{"ref":"ExploringMars.Mission.Direction.html#from_string/1","title":"ExploringMars.Mission.Direction.from_string/1","type":"function","doc":"Takes a string and tries to parse it as a direction. Examples iex&gt; Direction.from_string(&quot;N&quot;) {:ok, :N} iex&gt; Direction.from_string(&quot;Not a direction&quot;) {:no_parse, &quot;Not a direction&quot;}"},{"ref":"ExploringMars.Mission.Direction.html#pretty_print/1","title":"ExploringMars.Mission.Direction.pretty_print/1","type":"function","doc":"Converts a Direction.t into a representation suitable for user-facing output."},{"ref":"ExploringMars.Mission.Direction.html#turn_left/1","title":"ExploringMars.Mission.Direction.turn_left/1","type":"function","doc":"Takes a direction and returns the direction obtained by turning left. Examples iex&gt; Direction.turn_left(:N) :W iex&gt; Direction.turn_left(:Not_a_direction) ** (ArgumentError) argument is not a direction"},{"ref":"ExploringMars.Mission.Direction.html#turn_right/1","title":"ExploringMars.Mission.Direction.turn_right/1","type":"function","doc":"Takes a direction and returns the direction obtained by turning right. Examples iex&gt; Direction.turn_right(:N) :E iex&gt; Direction.turn_right(:Not_a_direction) ** (ArgumentError) argument is not a direction"},{"ref":"ExploringMars.Mission.Direction.html#t:t/0","title":"ExploringMars.Mission.Direction.t/0","type":"type","doc":"A direction is represented by an atom - either :N, :E, :W or :S representing North, East, West and South respectively. Use as Direction.t."},{"ref":"ExploringMars.Mission.Instruction.html","title":"ExploringMars.Mission.Instruction","type":"module","doc":"This module defines functions that operate on the probe&#39;s instructions. This module - and only this module - should change if new instructions are added, instructions are removed or if the meaning of instructions is changed."},{"ref":"ExploringMars.Mission.Instruction.html#from_string/1","title":"ExploringMars.Mission.Instruction.from_string/1","type":"function","doc":"Takes a string and tries to parse it as an instruction."},{"ref":"ExploringMars.Mission.Instruction.html#run/2","title":"ExploringMars.Mission.Instruction.run/2","type":"function","doc":"Takes a probe position and an instruction and returns the next position of the probe."},{"ref":"ExploringMars.Mission.Instruction.html#t:t/0","title":"ExploringMars.Mission.Instruction.t/0","type":"type","doc":"A single instruction, one of :L, :R, :M, representing &quot;Turn left&quot;, &quot;Turn right&quot;, and &quot;Move forward&quot;, respectively. Use as Instruction.t."},{"ref":"ExploringMars.Mission.Position.html","title":"ExploringMars.Mission.Position","type":"module","doc":"This module defines functions that operate on the probe&#39;s position. This module should change if the way a position is specified changes. For instance, if we had 3D space instead of 2D, or further degrees of freedom. See the notes in the Coordinate and Direction modules."},{"ref":"ExploringMars.Mission.Position.html#from_strings/3","title":"ExploringMars.Mission.Position.from_strings/3","type":"function","doc":"Takes three strings representing the x_coordinate, y_coordinate and direction of the probe and returns either :ok and the specified position or :no_parse and a description of what went wrong."},{"ref":"ExploringMars.Mission.Position.html#move_forward/1","title":"ExploringMars.Mission.Position.move_forward/1","type":"function","doc":"Takes a position and returns the position obtained by moving forward from that position."},{"ref":"ExploringMars.Mission.Position.html#pretty_print/1","title":"ExploringMars.Mission.Position.pretty_print/1","type":"function","doc":"Converts a position into a representation suitable for user-facing output."},{"ref":"ExploringMars.Mission.Position.html#turn_left/1","title":"ExploringMars.Mission.Position.turn_left/1","type":"function","doc":"Takes a position and returns the position obtained by turning left from that position."},{"ref":"ExploringMars.Mission.Position.html#turn_right/1","title":"ExploringMars.Mission.Position.turn_right/1","type":"function","doc":"Takes a position and returns the position obtained by turning right from that position."},{"ref":"ExploringMars.Mission.Position.html#t:t/0","title":"ExploringMars.Mission.Position.t/0","type":"type","doc":"The probe&#39;s position, specified by an x-coordinate, y-coordinate and direction. Use as Position.t."},{"ref":"ExploringMars.MissionRunner.html","title":"ExploringMars.MissionRunner","type":"module","doc":"File I/O handling module. Reads parameters from an io_device (which should be either a file or :stdio and runs each mission using the Mission module. This module should change if the specification of how mission parameters are laid out changes."},{"ref":"ExploringMars.MissionRunner.html#get_bounds_and_run/2","title":"ExploringMars.MissionRunner.get_bounds_and_run/2","type":"function","doc":"Takes an input file, an output file, and tries to read the input file as a mission specification, containing bounds and several missions. Outputs for each mission either an error (if the mission was malformed) or a mission result. For more information on mission results, check the documentation for the Mission module."}]